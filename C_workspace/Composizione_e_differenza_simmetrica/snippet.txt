        /*
        do
        {
            printf("Digita 0 per terminare l'inserimento delle coppie per la prima relazione binaria.\n");
            printf("Digita 1 per continuare l'inserimento.\n");
            scanf()
            
            if(valore_inserito == 0)
            {
                printf("Inserimento terminato\n");
                fine_inser_prima_rel_bin = 0;
            }
            else if(valore_inserito == 1)
            {
                printf("Proseguimento dell'inserimento\n"); 
            }
            else
            {
                printf("Valore non valido!\n");
            }
        }
        while(valore_inserito != 0 || valore_inserito != 1);
        */
        
    /*
    while(contatore_coppie_relazioni_binarie < 10){
        scanf("%d %d", &prima_relazione_binaria[contatore_coppie_relazioni_binarie], &prima_relazione_binaria[contatore_coppie_relazioni_binarie+1]);
        contatore_coppie_relazioni_binarie += 2;
    }
    contatore_coppie_relazioni_binarie = 0;
    printf("Prima relazione binaria acquisita!\n");
    */
    
        /*
    printf("Digita la seconda relazione binaria:\n");
    printf("Digita i due numeri della coppia:\n");
    while(contatore_coppie_relazioni_binarie < 10){
        scanf("%d %d", &seconda_relazione_binaria[contatore_coppie_relazioni_binarie], &seconda_relazione_binaria[contatore_coppie_relazioni_binarie+1]);
        contatore_coppie_relazioni_binarie += 2;
    }
    printf("Seconda relazione binaria acquisita!\n");
    
    printf("Prima relazione binaria:\n");
    for(j = 0; j < 10; j += 2)
        printf("%d,%d ", prima_relazione_binaria[j], prima_relazione_binaria[j+1]);
    printf("\n");
    
    printf("Seconda relazione binaria:\n");
    for(k = 0; k < 10; k += 2)
        printf("%d,%d ", seconda_relazione_binaria[k], seconda_relazione_binaria[k+1]);
    printf("\n");
    */
    
    
    
    
    
    /*Composizione*/
    /*
    while(contatore_esterno < 5){
        while(contatore_interno < 5){
            if(prima_relazione_binaria[contatore_prima_rel_bin] == seconda_relazione_binaria[contatore_seconda_rel_bin]){
                array_composizione[contatore_elem_coppia_comp] = prima_relazione_binaria[contatore_prima_rel_bin-1];
                contatore_elem_coppia_comp++;
                array_composizione[contatore_elem_coppia_comp] = seconda_relazione_binaria[contatore_seconda_rel_bin+1];
                contatore_elem_coppia_comp++;
            }
            contatore_seconda_rel_bin += 2;
            contatore_interno++;
        }
        contatore_esterno++;
        contatore_interno = 0;
        contatore_seconda_rel_bin = 0;
        contatore_prima_rel_bin += 2;
    }
    
    printf("Composizione:\n");
    for(a = 0; a < 50; a += 2)
        printf("%d,%d ", array_composizione[a], array_composizione[a+1]);
    printf("\n");
    */
    
    
    
    
    /*Differenza simmetrica*/
    /*
    while(contatore_esterno_diff < 10){
        if(contatore_esterno_diff < 5){
            while(contatore_interno_diff < 5){
                if((prima_relazione_binaria[contatore_prima_rel_bin_diff_simm] == seconda_relazione_binaria[contatore_seconda_rel_bin_diff_simm]) && 
                   (prima_relazione_binaria[contatore_prima_rel_bin_diff_simm+1] == seconda_relazione_binaria[contatore_seconda_rel_bin_diff_simm+1])){
                    contatore_interno_diff = 5;
                }
                else{
                    contatore_interno_diff++;
                    contatore_seconda_rel_bin_diff_simm += 2;
                    if(contatore_interno_diff == 5){
                        array_diff_simm[contatore_array_diff_simm] = prima_relazione_binaria[contatore_prima_rel_bin_diff_simm];
                        contatore_array_diff_simm++;
                        array_diff_simm[contatore_array_diff_simm] = prima_relazione_binaria[contatore_prima_rel_bin_diff_simm+1];
                        contatore_array_diff_simm++;
                    }
                }
            }
            contatore_prima_rel_bin_diff_simm += 2;
            contatore_seconda_rel_bin_diff_simm = 0;
            contatore_interno_diff = 0;
            contatore_esterno_diff++;
        }
        else{
            contatore_prima_rel_bin_diff_simm = 0;
            while(contatore_interno_diff < 5){
                if((seconda_relazione_binaria[contatore_seconda_rel_bin_diff_simm] == prima_relazione_binaria[contatore_prima_rel_bin_diff_simm]) && 
                   (seconda_relazione_binaria[contatore_seconda_rel_bin_diff_simm+1] == prima_relazione_binaria[contatore_prima_rel_bin_diff_simm+1])){
                    contatore_interno_diff = 5;
                }
                else{
                    contatore_interno_diff++;
                    contatore_prima_rel_bin_diff_simm += 2;
                    if(contatore_interno_diff == 5){
                        array_diff_simm[contatore_array_diff_simm] = seconda_relazione_binaria[contatore_seconda_rel_bin_diff_simm];
                        contatore_array_diff_simm++;
                        array_diff_simm[contatore_array_diff_simm] = seconda_relazione_binaria[contatore_seconda_rel_bin_diff_simm+1];
                        contatore_array_diff_simm++;
                    }
                }
            }
            contatore_prima_rel_bin_diff_simm = 0;
            contatore_seconda_rel_bin_diff_simm += 2;
            contatore_interno_diff = 0;
            contatore_esterno_diff++;
        }
    }
    
    printf("Differenza simmetrica:\n");
    for(b = 0; b < 50; b += 2)
        printf("%d,%d ", array_diff_simm[b], array_diff_simm[b+1]);
    printf("\n");
    */